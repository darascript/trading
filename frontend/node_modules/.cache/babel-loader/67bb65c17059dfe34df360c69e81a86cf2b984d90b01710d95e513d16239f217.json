{"ast":null,"code":"export const drawProjection = (chart, direction, entryPrice, targetPrice, stopLossPrice) => {\n  if (!chart) return;\n  const projectionSeries = chart.addLineSeries({\n    color: direction === 'long' ? 'green' : 'red',\n    lineWidth: 2,\n    lineStyle: 2 // Dashed line\n  });\n  const stopLossSeries = chart.addLineSeries({\n    color: 'red',\n    lineWidth: 1,\n    lineStyle: 1\n  });\n  const targetSeries = chart.addLineSeries({\n    color: 'green',\n    lineWidth: 1,\n    lineStyle: 1\n  });\n  const currentTime = Math.floor(Date.now() / 1000);\n  const projectionData = [{\n    time: currentTime,\n    value: entryPrice\n  }, {\n    time: currentTime + 60 * 60,\n    value: targetPrice\n  } // Projecting one hour ahead\n  ];\n  projectionSeries.setData(projectionData);\n  stopLossSeries.setData([{\n    time: currentTime,\n    value: stopLossPrice\n  }, {\n    time: currentTime + 60 * 60,\n    value: stopLossPrice\n  }]);\n  targetSeries.setData([{\n    time: currentTime,\n    value: targetPrice\n  }, {\n    time: currentTime + 60 * 60,\n    value: targetPrice\n  }]);\n  return {\n    projectionSeries,\n    stopLossSeries,\n    targetSeries\n  };\n};","map":{"version":3,"names":["drawProjection","chart","direction","entryPrice","targetPrice","stopLossPrice","projectionSeries","addLineSeries","color","lineWidth","lineStyle","stopLossSeries","targetSeries","currentTime","Math","floor","Date","now","projectionData","time","value","setData"],"sources":["/home/study/trading/frontend/src/drawProjection.js"],"sourcesContent":["export const drawProjection = (chart, direction, entryPrice, targetPrice, stopLossPrice) => {\n    if (!chart) return;\n  \n    const projectionSeries = chart.addLineSeries({\n      color: direction === 'long' ? 'green' : 'red',\n      lineWidth: 2,\n      lineStyle: 2, // Dashed line\n    });\n  \n    const stopLossSeries = chart.addLineSeries({\n      color: 'red',\n      lineWidth: 1,\n      lineStyle: 1,\n    });\n  \n    const targetSeries = chart.addLineSeries({\n      color: 'green',\n      lineWidth: 1,\n      lineStyle: 1,\n    });\n  \n    const currentTime = Math.floor(Date.now() / 1000);\n  \n    const projectionData = [\n      { time: currentTime, value: entryPrice },\n      { time: currentTime + 60 * 60, value: targetPrice }, // Projecting one hour ahead\n    ];\n  \n    projectionSeries.setData(projectionData);\n  \n    stopLossSeries.setData([\n      { time: currentTime, value: stopLossPrice },\n      { time: currentTime + 60 * 60, value: stopLossPrice },\n    ]);\n  \n    targetSeries.setData([\n      { time: currentTime, value: targetPrice },\n      { time: currentTime + 60 * 60, value: targetPrice },\n    ]);\n  \n    return { projectionSeries, stopLossSeries, targetSeries };\n  };\n  "],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAGA,CAACC,KAAK,EAAEC,SAAS,EAAEC,UAAU,EAAEC,WAAW,EAAEC,aAAa,KAAK;EACxF,IAAI,CAACJ,KAAK,EAAE;EAEZ,MAAMK,gBAAgB,GAAGL,KAAK,CAACM,aAAa,CAAC;IAC3CC,KAAK,EAAEN,SAAS,KAAK,MAAM,GAAG,OAAO,GAAG,KAAK;IAC7CO,SAAS,EAAE,CAAC;IACZC,SAAS,EAAE,CAAC,CAAE;EAChB,CAAC,CAAC;EAEF,MAAMC,cAAc,GAAGV,KAAK,CAACM,aAAa,CAAC;IACzCC,KAAK,EAAE,KAAK;IACZC,SAAS,EAAE,CAAC;IACZC,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAME,YAAY,GAAGX,KAAK,CAACM,aAAa,CAAC;IACvCC,KAAK,EAAE,OAAO;IACdC,SAAS,EAAE,CAAC;IACZC,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAMG,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;EAEjD,MAAMC,cAAc,GAAG,CACrB;IAAEC,IAAI,EAAEN,WAAW;IAAEO,KAAK,EAAEjB;EAAW,CAAC,EACxC;IAAEgB,IAAI,EAAEN,WAAW,GAAG,EAAE,GAAG,EAAE;IAAEO,KAAK,EAAEhB;EAAY,CAAC,CAAE;EAAA,CACtD;EAEDE,gBAAgB,CAACe,OAAO,CAACH,cAAc,CAAC;EAExCP,cAAc,CAACU,OAAO,CAAC,CACrB;IAAEF,IAAI,EAAEN,WAAW;IAAEO,KAAK,EAAEf;EAAc,CAAC,EAC3C;IAAEc,IAAI,EAAEN,WAAW,GAAG,EAAE,GAAG,EAAE;IAAEO,KAAK,EAAEf;EAAc,CAAC,CACtD,CAAC;EAEFO,YAAY,CAACS,OAAO,CAAC,CACnB;IAAEF,IAAI,EAAEN,WAAW;IAAEO,KAAK,EAAEhB;EAAY,CAAC,EACzC;IAAEe,IAAI,EAAEN,WAAW,GAAG,EAAE,GAAG,EAAE;IAAEO,KAAK,EAAEhB;EAAY,CAAC,CACpD,CAAC;EAEF,OAAO;IAAEE,gBAAgB;IAAEK,cAAc;IAAEC;EAAa,CAAC;AAC3D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}