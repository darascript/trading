{"ast":null,"code":"var _jsxFileName = \"/home/study/trading/frontend/src/ChartAndControls.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  _s();\n  const [projectionLines, setProjectionLines] = useState([]);\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: {\n        backgroundColor: '#ffffff',\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#eee'\n        },\n        horzLines: {\n          color: '#eee'\n        }\n      },\n      priceScale: {\n        minMove: 0.00001\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n        borderColor: '#ccc'\n      }\n    });\n    const series = chart.addCandlestickSeries();\n    setCandlestickSeries(series);\n    axios.post('http://127.0.0.1:5000/api/historical_data', {\n      startDate,\n      timeInterval\n    }).then(response => {\n      if (response.data.length > 0) {\n        const adjustedData = response.data.map(candle => ({\n          time: new Date(candle.time).getTime() / 1000,\n          open: candle.open,\n          high: candle.high,\n          low: candle.low,\n          close: candle.close\n        }));\n        series.setData(adjustedData);\n        setCurrentIndex(adjustedData.length);\n      }\n    }).catch(error => console.error('Error fetching data:', error));\n    chart.subscribeClick(param => {\n      if (!param || !param.time || !param.point) return;\n      const price = series.coordinateToPrice(param.point.y);\n      setClickedPoint({\n        time: new Date(param.time * 1000).toLocaleString(),\n        price\n      });\n\n      // Example: Add short/long projections based on the click point\n      const longProjection = price * 1.02; // 2% increase for long projection\n      const shortProjection = price * 0.98; // 2% decrease for short projection\n\n      // Project lines at the clicked point\n      const newProjectionLines = [{\n        time: param.time,\n        price: longProjection,\n        color: 'green',\n        id: 'long'\n      }, {\n        time: param.time,\n        price: shortProjection,\n        color: 'red',\n        id: 'short'\n      }];\n      setProjectionLines(newProjectionLines);\n\n      // Add projection lines to the chart\n      newProjectionLines.forEach(line => {\n        chart.addLineSeries({\n          color: line.color,\n          lineWidth: 2\n        }).setData([{\n          time: param.time,\n          value: price\n        }, {\n          time: param.time + 60 * 60,\n          value: line.price\n        } // Project forward by 1 hour (you can adjust this)\n        ]);\n      });\n    });\n    return () => chart.remove();\n  }, [startDate, timeInterval]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartContainerRef,\n      style: {\n        width: '100%',\n        height: '400px',\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTrade('buy'),\n        style: {\n          backgroundColor: 'green',\n          color: 'white',\n          padding: '10px'\n        },\n        children: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTrade('sell'),\n        style: {\n          backgroundColor: 'red',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Sell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewCandle,\n        style: {\n          backgroundColor: 'blue',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Next Candle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChartAndControls, \"DyOcHkebDSPB+gOsHIhMaQoao7U=\");\n_c = ChartAndControls;\nexport default ChartAndControls;\nvar _c;\n$RefreshReg$(_c, \"ChartAndControls\");","map":{"version":3,"names":["useEffect","useState","axios","createChart","jsxDEV","_jsxDEV","Fragment","_Fragment","ChartAndControls","chartContainerRef","candlestickSeries","setCandlestickSeries","currentIndex","setCurrentIndex","startDate","timeInterval","setClickedPoint","setTotalPnL","setTrades","handleTrade","addNewCandle","_s","projectionLines","setProjectionLines","current","chart","width","clientWidth","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","minMove","timeScale","timeVisible","secondsVisible","borderColor","series","addCandlestickSeries","post","then","response","data","length","adjustedData","map","candle","time","Date","getTime","open","high","low","close","setData","catch","error","console","subscribeClick","param","point","price","coordinateToPrice","y","toLocaleString","longProjection","shortProjection","newProjectionLines","id","forEach","line","addLineSeries","lineWidth","value","remove","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","onClick","padding","marginLeft","_c","$RefreshReg$"],"sources":["/home/study/trading/frontend/src/ChartAndControls.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\n\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  const [projectionLines, setProjectionLines] = useState([]);\n  \n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: { backgroundColor: '#ffffff', textColor: '#333' },\n      grid: { vertLines: { color: '#eee' }, horzLines: { color: '#eee' } },\n      priceScale: { minMove: 0.00001 },\n      timeScale: { timeVisible: true, secondsVisible: false, borderColor: '#ccc' },\n    });\n\n    const series = chart.addCandlestickSeries();\n    setCandlestickSeries(series);\n\n    axios.post('http://127.0.0.1:5000/api/historical_data', { startDate, timeInterval })\n      .then((response) => {\n        if (response.data.length > 0) {\n          const adjustedData = response.data.map(candle => ({\n            time: new Date(candle.time).getTime() / 1000,\n            open: candle.open,\n            high: candle.high,\n            low: candle.low,\n            close: candle.close,\n          }));\n          series.setData(adjustedData);\n          setCurrentIndex(adjustedData.length);\n        }\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n\n    chart.subscribeClick((param) => {\n      if (!param || !param.time || !param.point) return;\n      const price = series.coordinateToPrice(param.point.y);\n      setClickedPoint({\n        time: new Date(param.time * 1000).toLocaleString(),\n        price\n      });\n\n      // Example: Add short/long projections based on the click point\n      const longProjection = price * 1.02;  // 2% increase for long projection\n      const shortProjection = price * 0.98; // 2% decrease for short projection\n\n      // Project lines at the clicked point\n      const newProjectionLines = [\n        { time: param.time, price: longProjection, color: 'green', id: 'long' },\n        { time: param.time, price: shortProjection, color: 'red', id: 'short' },\n      ];\n      setProjectionLines(newProjectionLines);\n\n      // Add projection lines to the chart\n      newProjectionLines.forEach((line) => {\n        chart.addLineSeries({\n          color: line.color,\n          lineWidth: 2,\n        }).setData([\n          { time: param.time, value: price },\n          { time: param.time + 60 * 60, value: line.price }, // Project forward by 1 hour (you can adjust this)\n        ]);\n      });\n    });\n\n    return () => chart.remove();\n  }, [startDate, timeInterval]);\n\n  return (\n    <>\n      <div ref={chartContainerRef} style={{ width: '100%', height: '400px', border: '1px solid black' }}></div>\n      \n      <div style={{ marginTop: '10px' }}>\n        <button onClick={() => handleTrade('buy')} style={{ backgroundColor: 'green', color: 'white', padding: '10px' }}>\n          Buy\n        </button>\n        <button onClick={() => handleTrade('sell')} style={{ backgroundColor: 'red', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Sell\n        </button>\n        <button onClick={addNewCandle} style={{ backgroundColor: 'blue', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Next Candle\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ChartAndControls;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}