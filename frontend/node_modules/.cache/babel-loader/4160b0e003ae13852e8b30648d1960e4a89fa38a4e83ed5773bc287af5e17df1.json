{"ast":null,"code":"var _jsxFileName = \"/home/study/trading/frontend/src/ChartAndControls.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  _s();\n  const [projectionMode, setProjectionMode] = useState('long'); // 'long' or 'short'\n  const [projectionSeries, setProjectionSeries] = useState({\n    long: [],\n    short: []\n  });\n  const [chart, setChart] = useState(null);\n\n  // State for user-defined pips and time\n  const [greenPips, setGreenPips] = useState(40);\n  const [redPips, setRedPips] = useState(30);\n  const [projectionTime, setProjectionTime] = useState(60 * 60); // Default: 1 hour\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n    const newChart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: {\n        backgroundColor: '#ffffff',\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#eee'\n        },\n        horzLines: {\n          color: '#eee'\n        }\n      },\n      priceScale: {\n        minMove: 0.0001\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n        borderColor: '#ccc'\n      }\n    });\n    const series = newChart.addCandlestickSeries();\n    setCandlestickSeries(series);\n    setChart(newChart);\n    axios.post('http://127.0.0.1:5000/api/historical_data', {\n      startDate,\n      timeInterval\n    }).then(response => {\n      if (response.data.length > 0) {\n        const adjustedData = response.data.map(candle => ({\n          time: new Date(candle.time).getTime() / 1000,\n          open: candle.open,\n          high: candle.high,\n          low: candle.low,\n          close: candle.close\n        }));\n        series.setData(adjustedData);\n        setCurrentIndex(adjustedData.length);\n      }\n    }).catch(error => console.error('Error fetching data:', error));\n    return () => newChart.remove();\n  }, [chartContainerRef, setCandlestickSeries, setCurrentIndex, startDate, timeInterval]);\n  useEffect(() => {\n    if (!chart || !candlestickSeries) return;\n    const handleClick = param => {\n      if (!param || !param.time || !param.point) return;\n      const price = candlestickSeries.coordinateToPrice(param.point.y);\n      setClickedPoint({\n        time: new Date(param.time * 1000).toLocaleString(),\n        price\n      });\n      const pipValue = 0.0001;\n      const longPipValue = greenPips * pipValue;\n      const shortPipValue = redPips * pipValue;\n      let topPrice, bottomPrice, topColor, bottomColor;\n      if (projectionMode === 'long') {\n        topPrice = price + longPipValue;\n        bottomPrice = price - shortPipValue;\n        topColor = 'green';\n        bottomColor = 'red';\n      } else {\n        topPrice = price + shortPipValue;\n        bottomPrice = price - longPipValue;\n        topColor = 'red';\n        bottomColor = 'green';\n      }\n\n      // Remove previous projection lines of the same mode (only if they exist)\n      projectionSeries[projectionMode].filter(Boolean) // Removes undefined values\n      .forEach(series => chart.removeSeries(series));\n\n      // Create new projection lines\n      const topLine = chart.addLineSeries({\n        color: topColor,\n        lineWidth: 2\n      });\n      topLine.setData([{\n        time: param.time,\n        value: topPrice\n      }, {\n        time: param.time + projectionTime,\n        value: topPrice\n      }]);\n      const bottomLine = chart.addLineSeries({\n        color: bottomColor,\n        lineWidth: 2\n      });\n      bottomLine.setData([{\n        time: param.time,\n        value: bottomPrice\n      }, {\n        time: param.time + projectionTime,\n        value: bottomPrice\n      }]);\n\n      // Update projectionSeries to store only the latest lines\n      setProjectionSeries(prev => ({\n        ...prev,\n        [projectionMode]: [topLine, bottomLine]\n      }));\n    };\n    chart.subscribeClick(handleClick);\n    return () => chart.unsubscribeClick(handleClick);\n  }, [chart, candlestickSeries, setClickedPoint, projectionMode, greenPips, redPips, projectionTime]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartContainerRef,\n      style: {\n        width: '100%',\n        height: '400px',\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setProjectionMode('long'),\n        style: {\n          backgroundColor: projectionMode === 'long' ? 'green' : 'lightgray',\n          color: 'white',\n          padding: '10px'\n        },\n        children: \"Long Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setProjectionMode('short'),\n        style: {\n          backgroundColor: projectionMode === 'short' ? 'red' : 'lightgray',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Short Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Green Pips:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: greenPips,\n            onChange: e => setGreenPips(Number(e.target.value)),\n            style: {\n              marginLeft: '5px',\n              width: '60px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            marginLeft: '15px'\n          },\n          children: [\"Red Pips:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: redPips,\n            onChange: e => setRedPips(Number(e.target.value)),\n            style: {\n              marginLeft: '5px',\n              width: '60px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            marginLeft: '15px'\n          },\n          children: [\"Projection Time (seconds):\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: projectionTime,\n            onChange: e => setProjectionTime(Number(e.target.value)),\n            style: {\n              marginLeft: '5px',\n              width: '80px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleTrade('buy'),\n          style: {\n            backgroundColor: 'green',\n            color: 'white',\n            padding: '10px'\n          },\n          children: \"Buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleTrade('sell'),\n          style: {\n            backgroundColor: 'red',\n            color: 'white',\n            padding: '10px',\n            marginLeft: '10px'\n          },\n          children: \"Sell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewCandle,\n          style: {\n            backgroundColor: 'blue',\n            color: 'white',\n            padding: '10px',\n            marginLeft: '10px'\n          },\n          children: \"Next Candle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChartAndControls, \"8unEhGTpMGMgVlPHqtgm1YgvG38=\");\n_c = ChartAndControls;\nexport default ChartAndControls;\nvar _c;\n$RefreshReg$(_c, \"ChartAndControls\");","map":{"version":3,"names":["useEffect","useState","axios","createChart","jsxDEV","_jsxDEV","Fragment","_Fragment","ChartAndControls","chartContainerRef","candlestickSeries","setCandlestickSeries","currentIndex","setCurrentIndex","startDate","timeInterval","setClickedPoint","setTotalPnL","setTrades","handleTrade","addNewCandle","_s","projectionMode","setProjectionMode","projectionSeries","setProjectionSeries","long","short","chart","setChart","greenPips","setGreenPips","redPips","setRedPips","projectionTime","setProjectionTime","current","newChart","width","clientWidth","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","minMove","timeScale","timeVisible","secondsVisible","borderColor","series","addCandlestickSeries","post","then","response","data","length","adjustedData","map","candle","time","Date","getTime","open","high","low","close","setData","catch","error","console","remove","handleClick","param","point","price","coordinateToPrice","y","toLocaleString","pipValue","longPipValue","shortPipValue","topPrice","bottomPrice","topColor","bottomColor","filter","Boolean","forEach","removeSeries","topLine","addLineSeries","lineWidth","value","bottomLine","prev","subscribeClick","unsubscribeClick","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","onClick","padding","marginLeft","type","onChange","e","Number","target","_c","$RefreshReg$"],"sources":["/home/study/trading/frontend/src/ChartAndControls.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\n\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  const [projectionMode, setProjectionMode] = useState('long'); // 'long' or 'short'\n  const [projectionSeries, setProjectionSeries] = useState({ long: [], short: [] });\n  const [chart, setChart] = useState(null);\n\n  // State for user-defined pips and time\n  const [greenPips, setGreenPips] = useState(40);\n  const [redPips, setRedPips] = useState(30);\n  const [projectionTime, setProjectionTime] = useState(60 * 60); // Default: 1 hour\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n\n    const newChart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: { backgroundColor: '#ffffff', textColor: '#333' },\n      grid: { vertLines: { color: '#eee' }, horzLines: { color: '#eee' } },\n      priceScale: { minMove: 0.0001 },\n      timeScale: { timeVisible: true, secondsVisible: false, borderColor: '#ccc' },\n    });\n\n    const series = newChart.addCandlestickSeries();\n    setCandlestickSeries(series);\n    setChart(newChart);\n\n    axios.post('http://127.0.0.1:5000/api/historical_data', { startDate, timeInterval })\n      .then((response) => {\n        if (response.data.length > 0) {\n          const adjustedData = response.data.map(candle => ({\n            time: new Date(candle.time).getTime() / 1000,\n            open: candle.open,\n            high: candle.high,\n            low: candle.low,\n            close: candle.close,\n          }));\n          series.setData(adjustedData);\n          setCurrentIndex(adjustedData.length);\n        }\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n\n    return () => newChart.remove();\n  }, [chartContainerRef, setCandlestickSeries, setCurrentIndex, startDate, timeInterval]);\n\n  useEffect(() => {\n    if (!chart || !candlestickSeries) return;\n\n    const handleClick = (param) => {\n      if (!param || !param.time || !param.point) return;\n\n      const price = candlestickSeries.coordinateToPrice(param.point.y);\n      setClickedPoint({ time: new Date(param.time * 1000).toLocaleString(), price });\n\n      const pipValue = 0.0001;\n      const longPipValue = greenPips * pipValue;\n      const shortPipValue = redPips * pipValue;\n\n      let topPrice, bottomPrice, topColor, bottomColor;\n\n      if (projectionMode === 'long') {\n        topPrice = price + longPipValue;\n        bottomPrice = price - shortPipValue;\n        topColor = 'green';\n        bottomColor = 'red';\n      } else {\n        topPrice = price + shortPipValue;\n        bottomPrice = price - longPipValue;\n        topColor = 'red';\n        bottomColor = 'green';\n      }\n\n// Remove previous projection lines of the same mode (only if they exist)\nprojectionSeries[projectionMode]\n  .filter(Boolean) // Removes undefined values\n  .forEach((series) => chart.removeSeries(series));\n\n\n      // Create new projection lines\n      const topLine = chart.addLineSeries({ color: topColor, lineWidth: 2 });\n      topLine.setData([\n        { time: param.time, value: topPrice },\n        { time: param.time + projectionTime, value: topPrice },\n      ]);\n\n      const bottomLine = chart.addLineSeries({ color: bottomColor, lineWidth: 2 });\n      bottomLine.setData([\n        { time: param.time, value: bottomPrice },\n        { time: param.time + projectionTime, value: bottomPrice },\n      ]);\n\n      // Update projectionSeries to store only the latest lines\n      setProjectionSeries((prev) => ({\n        ...prev,\n        [projectionMode]: [topLine, bottomLine],\n      }));\n    };\n\n    chart.subscribeClick(handleClick);\n    return () => chart.unsubscribeClick(handleClick);\n  }, [chart, candlestickSeries, setClickedPoint, projectionMode, greenPips, redPips, projectionTime]);\n\n  return (\n    <>\n      <div ref={chartContainerRef} style={{ width: '100%', height: '400px', border: '1px solid black' }}></div>\n\n      <div style={{ marginTop: '10px' }}>\n        {/* Projection Mode Selection */}\n        <button onClick={() => setProjectionMode('long')} style={{ backgroundColor: projectionMode === 'long' ? 'green' : 'lightgray', color: 'white', padding: '10px' }}>\n          Long Mode\n        </button>\n        <button onClick={() => setProjectionMode('short')} style={{ backgroundColor: projectionMode === 'short' ? 'red' : 'lightgray', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Short Mode\n        </button>\n\n        {/* Pip & Time Adjustment Inputs */}\n        <div style={{ marginTop: '10px' }}>\n          <label>\n            Green Pips:\n            <input\n              type=\"number\"\n              value={greenPips}\n              onChange={(e) => setGreenPips(Number(e.target.value))}\n              style={{ marginLeft: '5px', width: '60px' }}\n            />\n          </label>\n          <label style={{ marginLeft: '15px' }}>\n            Red Pips:\n            <input\n              type=\"number\"\n              value={redPips}\n              onChange={(e) => setRedPips(Number(e.target.value))}\n              style={{ marginLeft: '5px', width: '60px' }}\n            />\n          </label>\n          <label style={{ marginLeft: '15px' }}>\n            Projection Time (seconds):\n            <input\n              type=\"number\"\n              value={projectionTime}\n              onChange={(e) => setProjectionTime(Number(e.target.value))}\n              style={{ marginLeft: '5px', width: '80px' }}\n            />\n          </label>\n        </div>\n\n        {/* Trading Buttons */}\n        <div style={{ marginTop: '10px' }}>\n          <button onClick={() => handleTrade('buy')} style={{ backgroundColor: 'green', color: 'white', padding: '10px' }}>\n            Buy\n          </button>\n          <button onClick={() => handleTrade('sell')} style={{ backgroundColor: 'red', color: 'white', padding: '10px', marginLeft: '10px' }}>\n            Sell\n          </button>\n          <button onClick={addNewCandle} style={{ backgroundColor: 'blue', color: 'white', padding: '10px', marginLeft: '10px' }}>\n            Next Candle\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ChartAndControls;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}