{"ast":null,"code":"var _jsxFileName = \"/home/study/trading/frontend/src/Form.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = ({\n  setTrades,\n  setTotalPnL\n}) => {\n  _s();\n  const [action, setAction] = useState('buy'); // 'buy' or 'sell'\n  const [quantity, setQuantity] = useState(1); // Default 1 unit\n  const [entryPrice, setEntryPrice] = useState('');\n  const [currentCandle, setCurrentCandle] = useState(null);\n  const [trades, setTradesState] = useState([]);\n  const [totalPnL, setTotalPnLState] = useState(0);\n\n  // Function to add a new trade to the state\n  const handleAddTrade = () => {\n    if (!entryPrice || !quantity || quantity <= 0) {\n      alert('Please enter a valid quantity and entry price.');\n      return;\n    }\n    const newTrade = {\n      id: Date.now(),\n      action,\n      quantity: parseInt(quantity),\n      entryPrice: parseFloat(entryPrice),\n      profitLoss: 0 // Initial profit/loss is 0 until it's updated\n    };\n    setTradesState(prevTrades => [...prevTrades, newTrade]);\n    setEntryPrice('');\n    setQuantity(1); // Reset quantity after trade\n  };\n\n  // Calculate profit/loss for each trade based on the latest market price (current candle close price)\n  const calculateProfitLoss = (trade, currentPrice) => {\n    if (trade.action === 'buy') {\n      return (currentPrice - trade.entryPrice) * trade.quantity;\n    } else if (trade.action === 'sell') {\n      return (trade.entryPrice - currentPrice) * trade.quantity;\n    }\n    return 0;\n  };\n\n  // Fetch current market data (current candle) and update trades every 5 seconds\n  useEffect(() => {\n    const fetchCurrentCandleAndUpdateTrades = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/api/current_candle');\n        const data = response.data;\n\n        // Update the current candle\n        setCurrentCandle(data.currentCandle);\n\n        // Update profit/loss for each trade based on current price\n        const updatedTrades = trades.map(trade => {\n          const profitLoss = calculateProfitLoss(trade, data.currentCandle.close);\n          return {\n            ...trade,\n            profitLoss\n          };\n        });\n\n        // Update total PnL\n        const totalPnL = updatedTrades.reduce((sum, trade) => sum + trade.profitLoss, 0);\n        setTotalPnLState(totalPnL);\n        setTrades(updatedTrades);\n      } catch (error) {\n        console.error('Error fetching current candle:', error);\n      }\n    };\n\n    // Poll every 5 seconds for the latest candle\n    const intervalId = setInterval(() => {\n      fetchCurrentCandleAndUpdateTrades();\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(intervalId);\n  }, [trades]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Trade Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Action: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: action,\n        onChange: e => setAction(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"buy\",\n          children: \"Buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"sell\",\n          children: \"Sell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Quantity: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: quantity,\n        onChange: e => setQuantity(e.target.value),\n        min: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Entry Price: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: entryPrice,\n        onChange: e => setEntryPrice(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTrade,\n      children: \"Add Trade\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Trades List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Entry Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Profit/Loss\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: trades.map(trade => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: trade.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: trade.action\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: trade.quantity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: trade.entryPrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: trade.profitLoss\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, trade.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Total PnL: \", totalPnL]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"0uli6F0yBvoDp/UG/TFVZdsH2jU=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Form","setTrades","setTotalPnL","_s","action","setAction","quantity","setQuantity","entryPrice","setEntryPrice","currentCandle","setCurrentCandle","trades","setTradesState","totalPnL","setTotalPnLState","handleAddTrade","alert","newTrade","id","Date","now","parseInt","parseFloat","profitLoss","prevTrades","calculateProfitLoss","trade","currentPrice","fetchCurrentCandleAndUpdateTrades","response","get","data","updatedTrades","map","close","reduce","sum","error","console","intervalId","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","min","onClick","border","_c","$RefreshReg$"],"sources":["/home/study/trading/frontend/src/Form.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst Form = ({ setTrades, setTotalPnL }) => {\n  const [action, setAction] = useState('buy');  // 'buy' or 'sell'\n  const [quantity, setQuantity] = useState(1);  // Default 1 unit\n  const [entryPrice, setEntryPrice] = useState('');\n  const [currentCandle, setCurrentCandle] = useState(null);\n  const [trades, setTradesState] = useState([]);\n  const [totalPnL, setTotalPnLState] = useState(0);\n\n  // Function to add a new trade to the state\n  const handleAddTrade = () => {\n    if (!entryPrice || !quantity || quantity <= 0) {\n      alert('Please enter a valid quantity and entry price.');\n      return;\n    }\n    \n    const newTrade = {\n      id: Date.now(),\n      action,\n      quantity: parseInt(quantity),\n      entryPrice: parseFloat(entryPrice),\n      profitLoss: 0,  // Initial profit/loss is 0 until it's updated\n    };\n    \n    setTradesState((prevTrades) => [...prevTrades, newTrade]);\n    setEntryPrice('');\n    setQuantity(1); // Reset quantity after trade\n  };\n\n  // Calculate profit/loss for each trade based on the latest market price (current candle close price)\n  const calculateProfitLoss = (trade, currentPrice) => {\n    if (trade.action === 'buy') {\n      return (currentPrice - trade.entryPrice) * trade.quantity;\n    } else if (trade.action === 'sell') {\n      return (trade.entryPrice - currentPrice) * trade.quantity;\n    }\n    return 0;\n  };\n\n  // Fetch current market data (current candle) and update trades every 5 seconds\n  useEffect(() => {\n    const fetchCurrentCandleAndUpdateTrades = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/api/current_candle');\n        const data = response.data;\n        \n        // Update the current candle\n        setCurrentCandle(data.currentCandle);\n\n        // Update profit/loss for each trade based on current price\n        const updatedTrades = trades.map((trade) => {\n          const profitLoss = calculateProfitLoss(trade, data.currentCandle.close);\n          return { ...trade, profitLoss };\n        });\n\n        // Update total PnL\n        const totalPnL = updatedTrades.reduce((sum, trade) => sum + trade.profitLoss, 0);\n        setTotalPnLState(totalPnL);\n        setTrades(updatedTrades);\n\n      } catch (error) {\n        console.error('Error fetching current candle:', error);\n      }\n    };\n\n    // Poll every 5 seconds for the latest candle\n    const intervalId = setInterval(() => {\n      fetchCurrentCandleAndUpdateTrades();\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(intervalId);\n  }, [trades]);\n\n  return (\n    <div>\n      <h3>Trade Form</h3>\n      <div>\n        <label>Action: </label>\n        <select value={action} onChange={(e) => setAction(e.target.value)}>\n          <option value=\"buy\">Buy</option>\n          <option value=\"sell\">Sell</option>\n        </select>\n      </div>\n\n      <div>\n        <label>Quantity: </label>\n        <input\n          type=\"number\"\n          value={quantity}\n          onChange={(e) => setQuantity(e.target.value)}\n          min=\"1\"\n        />\n      </div>\n\n      <div>\n        <label>Entry Price: </label>\n        <input\n          type=\"number\"\n          value={entryPrice}\n          onChange={(e) => setEntryPrice(e.target.value)}\n        />\n      </div>\n\n      <button onClick={handleAddTrade}>Add Trade</button>\n\n      <h3>Trades List</h3>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Action</th>\n            <th>Quantity</th>\n            <th>Entry Price</th>\n            <th>Profit/Loss</th>\n          </tr>\n        </thead>\n        <tbody>\n          {trades.map((trade) => (\n            <tr key={trade.id}>\n              <td>{trade.id}</td>\n              <td>{trade.action}</td>\n              <td>{trade.quantity}</td>\n              <td>{trade.entryPrice}</td>\n              <td>{trade.profitLoss}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <h3>Total PnL: {totalPnL}</h3>\n    </div>\n  );\n};\n\nexport default Form;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,IAAI,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;EAC9C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAE;EAC9C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACgB,MAAM,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAM,CAACkB,QAAQ,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;;EAEhD;EACA,MAAMoB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACR,UAAU,IAAI,CAACF,QAAQ,IAAIA,QAAQ,IAAI,CAAC,EAAE;MAC7CW,KAAK,CAAC,gDAAgD,CAAC;MACvD;IACF;IAEA,MAAMC,QAAQ,GAAG;MACfC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdjB,MAAM;MACNE,QAAQ,EAAEgB,QAAQ,CAAChB,QAAQ,CAAC;MAC5BE,UAAU,EAAEe,UAAU,CAACf,UAAU,CAAC;MAClCgB,UAAU,EAAE,CAAC,CAAG;IAClB,CAAC;IAEDX,cAAc,CAAEY,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAEP,QAAQ,CAAC,CAAC;IACzDT,aAAa,CAAC,EAAE,CAAC;IACjBF,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC;;EAED;EACA,MAAMmB,mBAAmB,GAAGA,CAACC,KAAK,EAAEC,YAAY,KAAK;IACnD,IAAID,KAAK,CAACvB,MAAM,KAAK,KAAK,EAAE;MAC1B,OAAO,CAACwB,YAAY,GAAGD,KAAK,CAACnB,UAAU,IAAImB,KAAK,CAACrB,QAAQ;IAC3D,CAAC,MAAM,IAAIqB,KAAK,CAACvB,MAAM,KAAK,MAAM,EAAE;MAClC,OAAO,CAACuB,KAAK,CAACnB,UAAU,GAAGoB,YAAY,IAAID,KAAK,CAACrB,QAAQ;IAC3D;IACA,OAAO,CAAC;EACV,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACd,MAAMkC,iCAAiC,GAAG,MAAAA,CAAA,KAAY;MACpD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMjC,KAAK,CAACkC,GAAG,CAAC,0CAA0C,CAAC;QAC5E,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI;;QAE1B;QACArB,gBAAgB,CAACqB,IAAI,CAACtB,aAAa,CAAC;;QAEpC;QACA,MAAMuB,aAAa,GAAGrB,MAAM,CAACsB,GAAG,CAAEP,KAAK,IAAK;UAC1C,MAAMH,UAAU,GAAGE,mBAAmB,CAACC,KAAK,EAAEK,IAAI,CAACtB,aAAa,CAACyB,KAAK,CAAC;UACvE,OAAO;YAAE,GAAGR,KAAK;YAAEH;UAAW,CAAC;QACjC,CAAC,CAAC;;QAEF;QACA,MAAMV,QAAQ,GAAGmB,aAAa,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEV,KAAK,KAAKU,GAAG,GAAGV,KAAK,CAACH,UAAU,EAAE,CAAC,CAAC;QAChFT,gBAAgB,CAACD,QAAQ,CAAC;QAC1Bb,SAAS,CAACgC,aAAa,CAAC;MAE1B,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;;IAED;IACA,MAAME,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCZ,iCAAiC,CAAC,CAAC;IACrC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMa,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,CAAC5B,MAAM,CAAC,CAAC;EAEZ,oBACEb,OAAA;IAAA4C,QAAA,gBACE5C,OAAA;MAAA4C,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBhD,OAAA;MAAA4C,QAAA,gBACE5C,OAAA;QAAA4C,QAAA,EAAO;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvBhD,OAAA;QAAQiD,KAAK,EAAE5C,MAAO;QAAC6C,QAAQ,EAAGC,CAAC,IAAK7C,SAAS,CAAC6C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAAAL,QAAA,gBAChE5C,OAAA;UAAQiD,KAAK,EAAC,KAAK;UAAAL,QAAA,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChChD,OAAA;UAAQiD,KAAK,EAAC,MAAM;UAAAL,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENhD,OAAA;MAAA4C,QAAA,gBACE5C,OAAA;QAAA4C,QAAA,EAAO;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzBhD,OAAA;QACEqD,IAAI,EAAC,QAAQ;QACbJ,KAAK,EAAE1C,QAAS;QAChB2C,QAAQ,EAAGC,CAAC,IAAK3C,WAAW,CAAC2C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC7CK,GAAG,EAAC;MAAG;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENhD,OAAA;MAAA4C,QAAA,gBACE5C,OAAA;QAAA4C,QAAA,EAAO;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5BhD,OAAA;QACEqD,IAAI,EAAC,QAAQ;QACbJ,KAAK,EAAExC,UAAW;QAClByC,QAAQ,EAAGC,CAAC,IAAKzC,aAAa,CAACyC,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENhD,OAAA;MAAQuD,OAAO,EAAEtC,cAAe;MAAA2B,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEnDhD,OAAA;MAAA4C,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBhD,OAAA;MAAOwD,MAAM,EAAC,GAAG;MAAAZ,QAAA,gBACf5C,OAAA;QAAA4C,QAAA,eACE5C,OAAA;UAAA4C,QAAA,gBACE5C,OAAA;YAAA4C,QAAA,EAAI;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACXhD,OAAA;YAAA4C,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACfhD,OAAA;YAAA4C,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjBhD,OAAA;YAAA4C,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBhD,OAAA;YAAA4C,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRhD,OAAA;QAAA4C,QAAA,EACG/B,MAAM,CAACsB,GAAG,CAAEP,KAAK,iBAChB5B,OAAA;UAAA4C,QAAA,gBACE5C,OAAA;YAAA4C,QAAA,EAAKhB,KAAK,CAACR;UAAE;YAAAyB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACnBhD,OAAA;YAAA4C,QAAA,EAAKhB,KAAK,CAACvB;UAAM;YAAAwC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACvBhD,OAAA;YAAA4C,QAAA,EAAKhB,KAAK,CAACrB;UAAQ;YAAAsC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACzBhD,OAAA;YAAA4C,QAAA,EAAKhB,KAAK,CAACnB;UAAU;YAAAoC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC3BhD,OAAA;YAAA4C,QAAA,EAAKhB,KAAK,CAACH;UAAU;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA,GALpBpB,KAAK,CAACR,EAAE;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAERhD,OAAA;MAAA4C,QAAA,GAAI,aAAW,EAAC7B,QAAQ;IAAA;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEV,CAAC;AAAC5C,EAAA,CAnIIH,IAAI;AAAAwD,EAAA,GAAJxD,IAAI;AAqIV,eAAeA,IAAI;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}