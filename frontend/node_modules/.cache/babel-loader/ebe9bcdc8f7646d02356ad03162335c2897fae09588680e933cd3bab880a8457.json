{"ast":null,"code":"var _jsxFileName = \"/home/study/trading/frontend/src/ChartAndControls.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  _s();\n  const [projectionMode, setProjectionMode] = useState(null); // 'long' or 'short'\n  const [projections, setProjections] = useState([]); // Store all projection lines\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: {\n        backgroundColor: '#ffffff',\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#eee'\n        },\n        horzLines: {\n          color: '#eee'\n        }\n      },\n      priceScale: {\n        minMove: 0.0001\n      },\n      // Adjusted for pips\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n        borderColor: '#ccc'\n      }\n    });\n    const series = chart.addCandlestickSeries();\n    setCandlestickSeries(series);\n    axios.post('http://127.0.0.1:5000/api/historical_data', {\n      startDate,\n      timeInterval\n    }).then(response => {\n      if (response.data.length > 0) {\n        const adjustedData = response.data.map(candle => ({\n          time: new Date(candle.time).getTime() / 1000,\n          open: candle.open,\n          high: candle.high,\n          low: candle.low,\n          close: candle.close\n        }));\n        series.setData(adjustedData);\n        setCurrentIndex(adjustedData.length);\n      }\n    }).catch(error => console.error('Error fetching data:', error));\n    chart.subscribeClick(param => {\n      if (!param || !param.time || !param.point || !projectionMode) return;\n      const price = series.coordinateToPrice(param.point.y);\n      setClickedPoint({\n        time: new Date(param.time * 1000).toLocaleString(),\n        price\n      });\n      const pipValue = 0.0001; // Adjust this based on the instrument\n      const longPips = 40 * pipValue; // 40 pips move\n      const shortPips = 30 * pipValue; // 30 pips move\n      const projectionTimeRange = 60 * 60; // Project forward by 1 hour\n\n      let topPrice, bottomPrice, topColor, bottomColor;\n      if (projectionMode === 'long') {\n        // Buy mode: Green on top, Red on bottom\n        topPrice = price + longPips;\n        bottomPrice = price - shortPips;\n        topColor = 'green';\n        bottomColor = 'red';\n      } else {\n        // Sell mode: Red on top, Green on bottom\n        topPrice = price + shortPips;\n        bottomPrice = price - longPips;\n        topColor = 'red';\n        bottomColor = 'green';\n      }\n      const newProjections = [{\n        time: param.time,\n        topPrice,\n        bottomPrice,\n        topColor,\n        bottomColor\n      }];\n      setProjections(prevProjections => [...prevProjections, ...newProjections]);\n\n      // Draw projection lines without resetting the graph\n      const topLineSeries = chart.addLineSeries({\n        color: topColor,\n        lineWidth: 2\n      });\n      const bottomLineSeries = chart.addLineSeries({\n        color: bottomColor,\n        lineWidth: 2\n      });\n      topLineSeries.setData([{\n        time: param.time,\n        value: topPrice\n      }, {\n        time: param.time + projectionTimeRange,\n        value: topPrice\n      }]);\n      bottomLineSeries.setData([{\n        time: param.time,\n        value: bottomPrice\n      }, {\n        time: param.time + projectionTimeRange,\n        value: bottomPrice\n      }]);\n    });\n    return () => chart.remove();\n  }, [startDate, timeInterval]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartContainerRef,\n      style: {\n        width: '100%',\n        height: '400px',\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setProjectionMode('long'),\n        style: {\n          backgroundColor: projectionMode === 'long' ? 'blue' : 'gray',\n          color: 'white',\n          padding: '10px',\n          marginRight: '10px'\n        },\n        children: \"Long Mode (Buy)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setProjectionMode('short'),\n        style: {\n          backgroundColor: projectionMode === 'short' ? 'purple' : 'gray',\n          color: 'white',\n          padding: '10px'\n        },\n        children: \"Short Mode (Sell)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTrade('buy'),\n        style: {\n          backgroundColor: 'green',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTrade('sell'),\n        style: {\n          backgroundColor: 'red',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Sell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewCandle,\n        style: {\n          backgroundColor: 'blue',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Next Candle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChartAndControls, \"/wfj+VLpYoJgyrVl0/nd3VZZk0U=\");\n_c = ChartAndControls;\nexport default ChartAndControls;\nvar _c;\n$RefreshReg$(_c, \"ChartAndControls\");","map":{"version":3,"names":["useEffect","useState","axios","createChart","jsxDEV","_jsxDEV","Fragment","_Fragment","ChartAndControls","chartContainerRef","candlestickSeries","setCandlestickSeries","currentIndex","setCurrentIndex","startDate","timeInterval","setClickedPoint","setTotalPnL","setTrades","handleTrade","addNewCandle","_s","projectionMode","setProjectionMode","projections","setProjections","current","chart","width","clientWidth","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","minMove","timeScale","timeVisible","secondsVisible","borderColor","series","addCandlestickSeries","post","then","response","data","length","adjustedData","map","candle","time","Date","getTime","open","high","low","close","setData","catch","error","console","subscribeClick","param","point","price","coordinateToPrice","y","toLocaleString","pipValue","longPips","shortPips","projectionTimeRange","topPrice","bottomPrice","topColor","bottomColor","newProjections","prevProjections","topLineSeries","addLineSeries","lineWidth","bottomLineSeries","value","remove","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","onClick","padding","marginRight","marginLeft","_c","$RefreshReg$"],"sources":["/home/study/trading/frontend/src/ChartAndControls.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\n\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  const [projectionMode, setProjectionMode] = useState(null); // 'long' or 'short'\n  const [projections, setProjections] = useState([]); // Store all projection lines\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: { backgroundColor: '#ffffff', textColor: '#333' },\n      grid: { vertLines: { color: '#eee' }, horzLines: { color: '#eee' } },\n      priceScale: { minMove: 0.0001 }, // Adjusted for pips\n      timeScale: { timeVisible: true, secondsVisible: false, borderColor: '#ccc' },\n    });\n\n    const series = chart.addCandlestickSeries();\n    setCandlestickSeries(series);\n\n    axios.post('http://127.0.0.1:5000/api/historical_data', { startDate, timeInterval })\n      .then((response) => {\n        if (response.data.length > 0) {\n          const adjustedData = response.data.map(candle => ({\n            time: new Date(candle.time).getTime() / 1000,\n            open: candle.open,\n            high: candle.high,\n            low: candle.low,\n            close: candle.close,\n          }));\n          series.setData(adjustedData);\n          setCurrentIndex(adjustedData.length);\n        }\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n\n    chart.subscribeClick((param) => {\n      if (!param || !param.time || !param.point || !projectionMode) return;\n\n      const price = series.coordinateToPrice(param.point.y);\n      setClickedPoint({\n        time: new Date(param.time * 1000).toLocaleString(),\n        price\n      });\n\n      const pipValue = 0.0001; // Adjust this based on the instrument\n      const longPips = 40 * pipValue; // 40 pips move\n      const shortPips = 30 * pipValue; // 30 pips move\n      const projectionTimeRange = 60 * 60; // Project forward by 1 hour\n\n      let topPrice, bottomPrice, topColor, bottomColor;\n\n      if (projectionMode === 'long') {\n        // Buy mode: Green on top, Red on bottom\n        topPrice = price + longPips;\n        bottomPrice = price - shortPips;\n        topColor = 'green';\n        bottomColor = 'red';\n      } else {\n        // Sell mode: Red on top, Green on bottom\n        topPrice = price + shortPips;\n        bottomPrice = price - longPips;\n        topColor = 'red';\n        bottomColor = 'green';\n      }\n\n      const newProjections = [\n        { time: param.time, topPrice, bottomPrice, topColor, bottomColor }\n      ];\n\n      setProjections(prevProjections => [...prevProjections, ...newProjections]);\n\n      // Draw projection lines without resetting the graph\n      const topLineSeries = chart.addLineSeries({ color: topColor, lineWidth: 2 });\n      const bottomLineSeries = chart.addLineSeries({ color: bottomColor, lineWidth: 2 });\n\n      topLineSeries.setData([\n        { time: param.time, value: topPrice },\n        { time: param.time + projectionTimeRange, value: topPrice },\n      ]);\n\n      bottomLineSeries.setData([\n        { time: param.time, value: bottomPrice },\n        { time: param.time + projectionTimeRange, value: bottomPrice },\n      ]);\n    });\n\n    return () => chart.remove();\n  }, [startDate, timeInterval]);\n\n  return (\n    <>\n      <div ref={chartContainerRef} style={{ width: '100%', height: '400px', border: '1px solid black' }}></div>\n\n      <div style={{ marginTop: '10px' }}>\n        <button \n          onClick={() => setProjectionMode('long')} \n          style={{ backgroundColor: projectionMode === 'long' ? 'blue' : 'gray', color: 'white', padding: '10px', marginRight: '10px' }}>\n          Long Mode (Buy)\n        </button>\n        \n        <button \n          onClick={() => setProjectionMode('short')} \n          style={{ backgroundColor: projectionMode === 'short' ? 'purple' : 'gray', color: 'white', padding: '10px' }}>\n          Short Mode (Sell)\n        </button>\n        \n        <button onClick={() => handleTrade('buy')} style={{ backgroundColor: 'green', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Buy\n        </button>\n        <button onClick={() => handleTrade('sell')} style={{ backgroundColor: 'red', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Sell\n        </button>\n        <button onClick={addNewCandle} style={{ backgroundColor: 'blue', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Next Candle\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ChartAndControls;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}