{"ast":null,"code":"var _jsxFileName = \"/home/study/trading/frontend/src/ChartAndControls.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  _s();\n  const [projectionMode, setProjectionMode] = useState(null); // 'long' or 'short'\n  const [chart, setChart] = useState(null); // Chart instance\n  const [projectionSeries, setProjectionSeries] = useState({\n    long: [],\n    short: []\n  }); // Stores projection lines\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n    const newChart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: {\n        backgroundColor: '#ffffff',\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#eee'\n        },\n        horzLines: {\n          color: '#eee'\n        }\n      },\n      priceScale: {\n        minMove: 0.0001\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n        borderColor: '#ccc'\n      }\n    });\n    const series = newChart.addCandlestickSeries();\n    setCandlestickSeries(series);\n    setChart(newChart);\n    axios.post('http://127.0.0.1:5000/api/historical_data', {\n      startDate,\n      timeInterval\n    }).then(response => {\n      if (response.data.length > 0) {\n        const adjustedData = response.data.map(candle => ({\n          time: new Date(candle.time).getTime() / 1000,\n          open: candle.open,\n          high: candle.high,\n          low: candle.low,\n          close: candle.close\n        }));\n        series.setData(adjustedData);\n        setCurrentIndex(adjustedData.length);\n      }\n    }).catch(error => console.error('Error fetching data:', error));\n    return () => newChart.remove();\n  }, [startDate, timeInterval]);\n  useEffect(() => {\n    if (!chart) return;\n    chart.subscribeClick(param => {\n      if (!param || !param.time || !param.point || !projectionMode) return;\n      const price = candlestickSeries.coordinateToPrice(param.point.y);\n      setClickedPoint({\n        time: new Date(param.time * 1000).toLocaleString(),\n        price\n      });\n      const pipValue = 0.0001;\n      const longPips = 40 * pipValue;\n      const shortPips = 30 * pipValue;\n      const projectionTimeRange = 60 * 60; // 1 hour forward projection\n\n      let topPrice, bottomPrice, topColor, bottomColor;\n      if (projectionMode === 'long') {\n        topPrice = price + longPips;\n        bottomPrice = price - shortPips;\n        topColor = 'green';\n        bottomColor = 'red';\n      } else {\n        topPrice = price + shortPips;\n        bottomPrice = price - longPips;\n        topColor = 'red';\n        bottomColor = 'green';\n      }\n\n      // Remove previous projection lines of the same mode\n      projectionSeries[projectionMode].forEach(series => chart.removeSeries(series));\n\n      // Create new projection lines for the selected mode\n      const topLine = chart.addLineSeries({\n        color: topColor,\n        lineWidth: 2\n      });\n      topLine.setData([{\n        time: param.time,\n        value: topPrice\n      }, {\n        time: param.time + projectionTimeRange,\n        value: topPrice\n      }]);\n      const bottomLine = chart.addLineSeries({\n        color: bottomColor,\n        lineWidth: 2\n      });\n      bottomLine.setData([{\n        time: param.time,\n        value: bottomPrice\n      }, {\n        time: param.time + projectionTimeRange,\n        value: bottomPrice\n      }]);\n\n      // Update projection series state\n      setProjectionSeries(prev => ({\n        ...prev,\n        [projectionMode]: [topLine, bottomLine]\n      }));\n    });\n  }, [chartContainerRef, setCandlestickSeries, setCurrentIndex, startDate, timeInterval]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartContainerRef,\n      style: {\n        width: '100%',\n        height: '400px',\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setProjectionMode('long'),\n        style: {\n          backgroundColor: projectionMode === 'long' ? 'blue' : 'gray',\n          color: 'white',\n          padding: '10px',\n          marginRight: '10px'\n        },\n        children: \"Long Mode (Buy)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setProjectionMode('short'),\n        style: {\n          backgroundColor: projectionMode === 'short' ? 'purple' : 'gray',\n          color: 'white',\n          padding: '10px'\n        },\n        children: \"Short Mode (Sell)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTrade('buy'),\n        style: {\n          backgroundColor: 'green',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTrade('sell'),\n        style: {\n          backgroundColor: 'red',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Sell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewCandle,\n        style: {\n          backgroundColor: 'blue',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Next Candle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChartAndControls, \"02ljUYoflvnbkEjmFoyubDsOokU=\");\n_c = ChartAndControls;\nexport default ChartAndControls;\nvar _c;\n$RefreshReg$(_c, \"ChartAndControls\");","map":{"version":3,"names":["useEffect","useState","axios","createChart","jsxDEV","_jsxDEV","Fragment","_Fragment","ChartAndControls","chartContainerRef","candlestickSeries","setCandlestickSeries","currentIndex","setCurrentIndex","startDate","timeInterval","setClickedPoint","setTotalPnL","setTrades","handleTrade","addNewCandle","_s","projectionMode","setProjectionMode","chart","setChart","projectionSeries","setProjectionSeries","long","short","current","newChart","width","clientWidth","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","minMove","timeScale","timeVisible","secondsVisible","borderColor","series","addCandlestickSeries","post","then","response","data","length","adjustedData","map","candle","time","Date","getTime","open","high","low","close","setData","catch","error","console","remove","subscribeClick","param","point","price","coordinateToPrice","y","toLocaleString","pipValue","longPips","shortPips","projectionTimeRange","topPrice","bottomPrice","topColor","bottomColor","forEach","removeSeries","topLine","addLineSeries","lineWidth","value","bottomLine","prev","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","onClick","padding","marginRight","marginLeft","_c","$RefreshReg$"],"sources":["/home/study/trading/frontend/src/ChartAndControls.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\n\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  const [projectionMode, setProjectionMode] = useState(null); // 'long' or 'short'\n  const [chart, setChart] = useState(null); // Chart instance\n  const [projectionSeries, setProjectionSeries] = useState({ long: [], short: [] }); // Stores projection lines\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n\n    const newChart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: { backgroundColor: '#ffffff', textColor: '#333' },\n      grid: { vertLines: { color: '#eee' }, horzLines: { color: '#eee' } },\n      priceScale: { minMove: 0.0001 },\n      timeScale: { timeVisible: true, secondsVisible: false, borderColor: '#ccc' },\n    });\n\n    const series = newChart.addCandlestickSeries();\n    setCandlestickSeries(series);\n    setChart(newChart);\n\n    axios.post('http://127.0.0.1:5000/api/historical_data', { startDate, timeInterval })\n      .then((response) => {\n        if (response.data.length > 0) {\n          const adjustedData = response.data.map(candle => ({\n            time: new Date(candle.time).getTime() / 1000,\n            open: candle.open,\n            high: candle.high,\n            low: candle.low,\n            close: candle.close,\n          }));\n          series.setData(adjustedData);\n          setCurrentIndex(adjustedData.length);\n        }\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n\n    return () => newChart.remove();\n  }, [startDate, timeInterval]);\n\n  useEffect(() => {\n    if (!chart) return;\n\n    chart.subscribeClick((param) => {\n      if (!param || !param.time || !param.point || !projectionMode) return;\n\n      const price = candlestickSeries.coordinateToPrice(param.point.y);\n      setClickedPoint({ time: new Date(param.time * 1000).toLocaleString(), price });\n\n      const pipValue = 0.0001;\n      const longPips = 40 * pipValue;\n      const shortPips = 30 * pipValue;\n      const projectionTimeRange = 60 * 60; // 1 hour forward projection\n\n      let topPrice, bottomPrice, topColor, bottomColor;\n\n      if (projectionMode === 'long') {\n        topPrice = price + longPips;\n        bottomPrice = price - shortPips;\n        topColor = 'green';\n        bottomColor = 'red';\n      } else {\n        topPrice = price + shortPips;\n        bottomPrice = price - longPips;\n        topColor = 'red';\n        bottomColor = 'green';\n      }\n\n      // Remove previous projection lines of the same mode\n      projectionSeries[projectionMode].forEach((series) => chart.removeSeries(series));\n\n      // Create new projection lines for the selected mode\n      const topLine = chart.addLineSeries({ color: topColor, lineWidth: 2 });\n      topLine.setData([\n        { time: param.time, value: topPrice },\n        { time: param.time + projectionTimeRange, value: topPrice },\n      ]);\n\n      const bottomLine = chart.addLineSeries({ color: bottomColor, lineWidth: 2 });\n      bottomLine.setData([\n        { time: param.time, value: bottomPrice },\n        { time: param.time + projectionTimeRange, value: bottomPrice },\n      ]);\n\n      // Update projection series state\n      setProjectionSeries((prev) => ({\n        ...prev,\n        [projectionMode]: [topLine, bottomLine],\n      }));\n    });\n  }, [chartContainerRef, setCandlestickSeries, setCurrentIndex, startDate, timeInterval]);\n\n  return (\n    <>\n      <div ref={chartContainerRef} style={{ width: '100%', height: '400px', border: '1px solid black' }}></div>\n\n      <div style={{ marginTop: '10px' }}>\n        <button \n          onClick={() => setProjectionMode('long')} \n          style={{ backgroundColor: projectionMode === 'long' ? 'blue' : 'gray', color: 'white', padding: '10px', marginRight: '10px' }}>\n          Long Mode (Buy)\n        </button>\n        \n        <button \n          onClick={() => setProjectionMode('short')} \n          style={{ backgroundColor: projectionMode === 'short' ? 'purple' : 'gray', color: 'white', padding: '10px' }}>\n          Short Mode (Sell)\n        </button>\n        \n        <button onClick={() => handleTrade('buy')} style={{ backgroundColor: 'green', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Buy\n        </button>\n        <button onClick={() => handleTrade('sell')} style={{ backgroundColor: 'red', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Sell\n        </button>\n        <button onClick={addNewCandle} style={{ backgroundColor: 'blue', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Next Candle\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ChartAndControls;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}