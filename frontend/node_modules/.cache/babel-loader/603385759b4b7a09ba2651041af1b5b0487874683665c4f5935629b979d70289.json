{"ast":null,"code":"var _jsxFileName = \"/home/study/trading/frontend/src/ChartAndControls.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  _s();\n  const [projection, setProjection] = useState(null); // For storing the active projection\n  const chartRef = useRef(null); // Ref to store chart instance\n  const projectionLineRef = useRef([]); // Ref to store line series for projections\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n\n    // Create the chart and store it in the ref\n    chartRef.current = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: {\n        backgroundColor: '#ffffff',\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#eee'\n        },\n        horzLines: {\n          color: '#eee'\n        }\n      },\n      priceScale: {\n        minMove: 0.00001\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n        borderColor: '#ccc'\n      }\n    });\n    const series = chartRef.current.addCandlestickSeries();\n    setCandlestickSeries(series);\n    axios.post('http://127.0.0.1:5000/api/historical_data', {\n      startDate,\n      timeInterval\n    }).then(response => {\n      if (response.data.length > 0) {\n        const adjustedData = response.data.map(candle => ({\n          time: new Date(candle.time).getTime() / 1000,\n          open: candle.open,\n          high: candle.high,\n          low: candle.low,\n          close: candle.close\n        }));\n        series.setData(adjustedData);\n        setCurrentIndex(adjustedData.length);\n      }\n    }).catch(error => console.error('Error fetching data:', error));\n\n    // Add click functionality to draw projections\n    chartRef.current.subscribeClick(param => {\n      if (!param || !param.time || !param.point) return;\n      const price = series.coordinateToPrice(param.point.y);\n      setClickedPoint({\n        time: new Date(param.time * 1000).toLocaleString(),\n        price\n      });\n\n      // If there's already an active projection, finalize it\n      if (projection) {\n        drawProjection(projection.entryTime, projection.entryPrice, param.time, price);\n        setProjection(null); // Reset after drawing the projection\n      } else {\n        // Start a new projection\n        setProjection({\n          entryTime: param.time,\n          entryPrice: price\n        });\n      }\n    });\n    return () => chartRef.current.remove();\n  }, [startDate, timeInterval, projection, setCandlestickSeries, setCurrentIndex, setClickedPoint, chartContainerRef]);\n\n  // Function to draw the projection lines (long/short)\n  const startProjection = useCallback((entryTime, entryPrice, exitTime, exitPrice) => {\n    if (!chartRef.current) return;\n\n    // Create a new line series for projection\n    const projectionSeries = chartRef.current.addLineSeries({\n      color: 'green',\n      lineWidth: 2,\n      lineStyle: 2\n    });\n\n    // Set the data for the projection (entry and exit points)\n    projectionSeries.setData([{\n      time: entryTime,\n      value: entryPrice\n    }, {\n      time: exitTime,\n      value: exitPrice\n    }]);\n  }, [chartRef]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartContainerRef,\n      style: {\n        width: '100%',\n        height: '400px',\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTrade('buy'),\n        style: {\n          backgroundColor: 'green',\n          color: 'white',\n          padding: '10px'\n        },\n        children: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTrade('sell'),\n        style: {\n          backgroundColor: 'red',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Sell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewCandle,\n        style: {\n          backgroundColor: 'blue',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Next Candle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChartAndControls, \"mA4sxWYGwBpxbT1JRVfvHGKrlLg=\");\n_c = ChartAndControls;\nexport default ChartAndControls;\nvar _c;\n$RefreshReg$(_c, \"ChartAndControls\");","map":{"version":3,"names":["useEffect","useState","useRef","axios","createChart","jsxDEV","_jsxDEV","Fragment","_Fragment","ChartAndControls","chartContainerRef","candlestickSeries","setCandlestickSeries","currentIndex","setCurrentIndex","startDate","timeInterval","setClickedPoint","setTotalPnL","setTrades","handleTrade","addNewCandle","_s","projection","setProjection","chartRef","projectionLineRef","current","width","clientWidth","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","minMove","timeScale","timeVisible","secondsVisible","borderColor","series","addCandlestickSeries","post","then","response","data","length","adjustedData","map","candle","time","Date","getTime","open","high","low","close","setData","catch","error","console","subscribeClick","param","point","price","coordinateToPrice","y","toLocaleString","drawProjection","entryTime","entryPrice","remove","startProjection","useCallback","exitTime","exitPrice","projectionSeries","addLineSeries","lineWidth","lineStyle","value","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","onClick","padding","marginLeft","_c","$RefreshReg$"],"sources":["/home/study/trading/frontend/src/ChartAndControls.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\n\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  const [projection, setProjection] = useState(null); // For storing the active projection\n  const chartRef = useRef(null); // Ref to store chart instance\n  const projectionLineRef = useRef([]); // Ref to store line series for projections\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n  \n    // Create the chart and store it in the ref\n    chartRef.current = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: { backgroundColor: '#ffffff', textColor: '#333' },\n      grid: { vertLines: { color: '#eee' }, horzLines: { color: '#eee' } },\n      priceScale: { minMove: 0.00001 },\n      timeScale: { timeVisible: true, secondsVisible: false, borderColor: '#ccc' },\n    });\n  \n    const series = chartRef.current.addCandlestickSeries();\n    setCandlestickSeries(series);\n  \n    axios.post('http://127.0.0.1:5000/api/historical_data', { startDate, timeInterval })\n      .then((response) => {\n        if (response.data.length > 0) {\n          const adjustedData = response.data.map(candle => ({\n            time: new Date(candle.time).getTime() / 1000,\n            open: candle.open,\n            high: candle.high,\n            low: candle.low,\n            close: candle.close,\n          }));\n          series.setData(adjustedData);\n          setCurrentIndex(adjustedData.length);\n        }\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n  \n    // Add click functionality to draw projections\n    chartRef.current.subscribeClick((param) => {\n      if (!param || !param.time || !param.point) return;\n      const price = series.coordinateToPrice(param.point.y);\n      setClickedPoint({\n        time: new Date(param.time * 1000).toLocaleString(),\n        price\n      });\n  \n      // If there's already an active projection, finalize it\n      if (projection) {\n        drawProjection(projection.entryTime, projection.entryPrice, param.time, price);\n        setProjection(null); // Reset after drawing the projection\n      } else {\n        // Start a new projection\n        setProjection({\n          entryTime: param.time,\n          entryPrice: price\n        });\n      }\n    });\n  \n    return () => chartRef.current.remove();\n  }, [startDate, timeInterval, projection, setCandlestickSeries, setCurrentIndex, setClickedPoint, chartContainerRef]);\n  \n  // Function to draw the projection lines (long/short)\n  const startProjection = useCallback((entryTime, entryPrice, exitTime, exitPrice) => {\n    if (!chartRef.current) return;\n  \n    // Create a new line series for projection\n    const projectionSeries = chartRef.current.addLineSeries({\n      color: 'green',\n      lineWidth: 2,\n      lineStyle: 2,\n    });\n  \n    // Set the data for the projection (entry and exit points)\n    projectionSeries.setData([\n      { time: entryTime, value: entryPrice },\n      { time: exitTime, value: exitPrice }\n    ]);\n  }, [chartRef]);\n  \n  return (\n    <>\n      <div ref={chartContainerRef} style={{ width: '100%', height: '400px', border: '1px solid black' }}></div>\n      \n      <div style={{ marginTop: '10px' }}>\n        <button onClick={() => handleTrade('buy')} style={{ backgroundColor: 'green', color: 'white', padding: '10px' }}>\n          Buy\n        </button>\n        <button onClick={() => handleTrade('sell')} style={{ backgroundColor: 'red', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Sell\n        </button>\n        <button onClick={addNewCandle} style={{ backgroundColor: 'blue', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Next Candle\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ChartAndControls;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}