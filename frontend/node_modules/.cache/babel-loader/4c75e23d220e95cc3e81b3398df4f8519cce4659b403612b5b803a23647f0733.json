{"ast":null,"code":"var _jsxFileName = \"/home/study/trading/frontend/src/ChartAndControls.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  _s();\n  const [projectionMode, setProjectionMode] = useState('long');\n  const [projections, setProjections] = useState([]);\n  const [chart, setChart] = useState(null);\n  const [predictionTimeRange, setPredictionTimeRange] = useState(3600); // Default projection time in seconds (e.g., 1 hour)\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n    const newChart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: {\n        backgroundColor: '#ffffff',\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#eee'\n        },\n        horzLines: {\n          color: '#eee'\n        }\n      },\n      priceScale: {\n        minMove: 0.0001\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n        borderColor: '#ccc'\n      }\n    });\n    const series = newChart.addCandlestickSeries();\n    setCandlestickSeries(series);\n    setChart(newChart);\n    axios.post('http://127.0.0.1:5000/api/historical_data', {\n      startDate,\n      timeInterval\n    }).then(response => {\n      if (response.data.length > 0) {\n        const adjustedData = response.data.map(candle => ({\n          time: new Date(candle.time).getTime() / 1000,\n          open: candle.open,\n          high: candle.high,\n          low: candle.low,\n          close: candle.close\n        }));\n        series.setData(adjustedData);\n        setCurrentIndex(adjustedData.length);\n      }\n    }).catch(error => console.error('Error fetching data:', error));\n    return () => newChart.remove();\n  }, [chartContainerRef, setCandlestickSeries, setCurrentIndex, startDate, timeInterval]);\n  useEffect(() => {\n    if (!chart || !candlestickSeries) return;\n    const handleClick = param => {\n      if (!param || !param.time || !param.point) return;\n\n      // Define the start time (the time where you clicked)\n      const startTime = param.time;\n\n      // Define the future time by adding the prediction time range\n      const futureTime = startTime + predictionTimeRange;\n\n      // Create a vertical line at the clicked time\n      const line = chart.addLineSeries({\n        color: 'blue',\n        // Customize the color of your prediction line\n        lineWidth: 2,\n        crosshairMarkerVisible: false // Hide any crosshair markers\n      });\n\n      // Extend the line from the clicked time to the future time\n      line.setData([{\n        time: startTime,\n        value: 0\n      },\n      // Line starts from the clicked time\n      {\n        time: futureTime,\n        value: 0\n      } // Line extends to the future time\n      ]);\n      const newProjection = {\n        id: Date.now(),\n        line\n      };\n      setProjections(prev => [...prev, newProjection]);\n    };\n    chart.subscribeClick(handleClick);\n    return () => chart.unsubscribeClick(handleClick);\n  }, [chart, candlestickSeries, setClickedPoint, predictionTimeRange]);\n  const removeProjection = id => {\n    setProjections(prev => {\n      if (!chart) {\n        console.error(\"Chart is undefined\");\n        return prev;\n      }\n      const projectionToRemove = prev.find(p => p.id === id);\n      if (!projectionToRemove) {\n        console.error(`Projection with ID ${id} not found`);\n        return prev;\n      }\n      try {\n        if (projectionToRemove.topLine) {\n          chart.removeSeries(projectionToRemove.topLine);\n        }\n        if (projectionToRemove.bottomLine) {\n          chart.removeSeries(projectionToRemove.bottomLine);\n        }\n      } catch (error) {\n        console.error(\"Error removing projection series:\", error);\n      }\n      return prev.filter(p => p.id !== id);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartContainerRef,\n      style: {\n        width: '100%',\n        height: '400px',\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setProjectionMode('long'),\n        style: {\n          backgroundColor: projectionMode === 'long' ? 'green' : 'lightgray',\n          color: 'white',\n          padding: '10px'\n        },\n        children: \"Long Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setProjectionMode('short'),\n        style: {\n          backgroundColor: projectionMode === 'short' ? 'red' : 'lightgray',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Short Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTrade('buy'),\n        style: {\n          backgroundColor: 'green',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTrade('sell'),\n        style: {\n          backgroundColor: 'red',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Sell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewCandle,\n        style: {\n          backgroundColor: 'blue',\n          color: 'white',\n          padding: '10px',\n          marginLeft: '10px'\n        },\n        children: \"Next Candle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: projections.map((proj, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => removeProjection(proj.id),\n        style: {\n          marginRight: '10px',\n          padding: '5px',\n          backgroundColor: 'gray',\n          color: 'white'\n        },\n        children: [\"Delete Projection \", index + 1]\n      }, proj.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChartAndControls, \"vjqQJkKGMg8RagyQSrxHC4NXsX0=\");\n_c = ChartAndControls;\nexport default ChartAndControls;\nvar _c;\n$RefreshReg$(_c, \"ChartAndControls\");","map":{"version":3,"names":["useEffect","useState","axios","createChart","jsxDEV","_jsxDEV","Fragment","_Fragment","ChartAndControls","chartContainerRef","candlestickSeries","setCandlestickSeries","currentIndex","setCurrentIndex","startDate","timeInterval","setClickedPoint","setTotalPnL","setTrades","handleTrade","addNewCandle","_s","projectionMode","setProjectionMode","projections","setProjections","chart","setChart","predictionTimeRange","setPredictionTimeRange","current","newChart","width","clientWidth","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","minMove","timeScale","timeVisible","secondsVisible","borderColor","series","addCandlestickSeries","post","then","response","data","length","adjustedData","map","candle","time","Date","getTime","open","high","low","close","setData","catch","error","console","remove","handleClick","param","point","startTime","futureTime","line","addLineSeries","lineWidth","crosshairMarkerVisible","value","newProjection","id","now","prev","subscribeClick","unsubscribeClick","removeProjection","projectionToRemove","find","p","topLine","removeSeries","bottomLine","filter","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","onClick","padding","marginLeft","proj","index","marginRight","_c","$RefreshReg$"],"sources":["/home/study/trading/frontend/src/ChartAndControls.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { createChart } from 'lightweight-charts';\n\nconst ChartAndControls = ({\n  chartContainerRef,\n  candlestickSeries,\n  setCandlestickSeries,\n  currentIndex,\n  setCurrentIndex,\n  startDate,\n  timeInterval,\n  setClickedPoint,\n  setTotalPnL,\n  setTrades,\n  handleTrade,\n  addNewCandle\n}) => {\n  const [projectionMode, setProjectionMode] = useState('long');\n  const [projections, setProjections] = useState([]);\n  const [chart, setChart] = useState(null);\n  const [predictionTimeRange, setPredictionTimeRange] = useState(3600); // Default projection time in seconds (e.g., 1 hour)\n\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n\n    const newChart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 400,\n      layout: { backgroundColor: '#ffffff', textColor: '#333' },\n      grid: { vertLines: { color: '#eee' }, horzLines: { color: '#eee' } },\n      priceScale: { minMove: 0.0001 },\n      timeScale: { timeVisible: true, secondsVisible: false, borderColor: '#ccc' },\n    });\n\n    const series = newChart.addCandlestickSeries();\n    setCandlestickSeries(series);\n    setChart(newChart);\n\n    axios.post('http://127.0.0.1:5000/api/historical_data', { startDate, timeInterval })\n      .then((response) => {\n        if (response.data.length > 0) {\n          const adjustedData = response.data.map(candle => ({\n            time: new Date(candle.time).getTime() / 1000,\n            open: candle.open,\n            high: candle.high,\n            low: candle.low,\n            close: candle.close,\n          }));\n          series.setData(adjustedData);\n          setCurrentIndex(adjustedData.length);\n        }\n      })\n      .catch((error) => console.error('Error fetching data:', error));\n\n    return () => newChart.remove();\n  }, [chartContainerRef, setCandlestickSeries, setCurrentIndex, startDate, timeInterval]);\n\n useEffect(() => {\n  if (!chart || !candlestickSeries) return;\n\n  const handleClick = (param) => {\n    if (!param || !param.time || !param.point) return;\n\n    // Define the start time (the time where you clicked)\n    const startTime = param.time;\n\n    // Define the future time by adding the prediction time range\n    const futureTime = startTime + predictionTimeRange;\n\n    // Create a vertical line at the clicked time\n    const line = chart.addLineSeries({\n      color: 'blue', // Customize the color of your prediction line\n      lineWidth: 2,\n      crosshairMarkerVisible: false, // Hide any crosshair markers\n    });\n\n    // Extend the line from the clicked time to the future time\n    line.setData([\n      { time: startTime, value: 0 }, // Line starts from the clicked time\n      { time: futureTime, value: 0 }, // Line extends to the future time\n    ]);\n\n    const newProjection = { id: Date.now(), line };\n    setProjections((prev) => [...prev, newProjection]);\n  };\n\n  chart.subscribeClick(handleClick);\n  return () => chart.unsubscribeClick(handleClick);\n}, [chart, candlestickSeries, setClickedPoint, predictionTimeRange]);\n\nconst removeProjection = (id) => {\n  setProjections((prev) => {\n    if (!chart) {\n      console.error(\"Chart is undefined\");\n      return prev;\n    }\n\n    const projectionToRemove = prev.find((p) => p.id === id);\n    if (!projectionToRemove) {\n      console.error(`Projection with ID ${id} not found`);\n      return prev;\n    }\n\n    try {\n      if (projectionToRemove.topLine) {\n        chart.removeSeries(projectionToRemove.topLine);\n      }\n      if (projectionToRemove.bottomLine) {\n        chart.removeSeries(projectionToRemove.bottomLine);\n      }\n    } catch (error) {\n      console.error(\"Error removing projection series:\", error);\n    }\n\n    return prev.filter((p) => p.id !== id);\n  });\n};\n\n\n  return (\n    <>\n      <div ref={chartContainerRef} style={{ width: '100%', height: '400px', border: '1px solid black' }}></div>\n\n      <div style={{ marginTop: '10px' }}>\n        <button onClick={() => setProjectionMode('long')} style={{ backgroundColor: projectionMode === 'long' ? 'green' : 'lightgray', color: 'white', padding: '10px' }}>\n          Long Mode\n        </button>\n        <button onClick={() => setProjectionMode('short')} style={{ backgroundColor: projectionMode === 'short' ? 'red' : 'lightgray', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Short Mode\n        </button>\n        <button onClick={() => handleTrade('buy')} style={{ backgroundColor: 'green', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Buy\n        </button>\n        <button onClick={() => handleTrade('sell')} style={{ backgroundColor: 'red', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Sell\n        </button>\n        <button onClick={addNewCandle} style={{ backgroundColor: 'blue', color: 'white', padding: '10px', marginLeft: '10px' }}>\n          Next Candle\n        </button>\n      </div>\n\n      <div style={{ marginTop: '10px' }}>\n        {projections.map((proj, index) => (\n          <button key={proj.id} onClick={() => removeProjection(proj.id)} style={{ marginRight: '10px', padding: '5px', backgroundColor: 'gray', color: 'white' }}>\n            Delete Projection {index + 1}\n          </button>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default ChartAndControls;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}